"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendKeysPlugin = void 0;
function isObject(payload) {
    return payload != null && typeof payload === 'object';
}
function isSendKeysPayload(payload) {
    if (!isObject(payload))
        throw new Error('You must provide a `SendKeysPayload` object');
    if (!!payload.type && !!payload.press)
        throw new Error('You must provide ONLY one of the `type` or `press` properties for pass to the browser runner.');
    if (!payload.type && !payload.press)
        throw new Error('You mist provide one of the `type` or `press` properties for pass to the browser runner.');
    const payloadKeys = Object.keys(payload).filter(key => key !== 'press' && key !== 'type');
    if (payloadKeys.length) {
        throw new Error('Unknown options `' + payloadKeys.join(', ') + '` present.');
    }
    return true;
}
function sendKeysPlugin() {
    return {
        name: 'send-keys-command',
        async executeCommand({ command, payload, session }) {
            if (command === 'send-keys') {
                if (!isSendKeysPayload(payload) || !payload) {
                    throw new Error('You must provide a `SendKeysPayload` object');
                }
                // handle specific behavior for playwright
                if (session.browser.type === 'playwright') {
                    const page = session.browser.getPage(session.id);
                    if (payload.type) {
                        await page.keyboard.type(payload.type);
                        return true;
                    }
                    else if (payload.press) {
                        await page.keyboard.press(payload.press);
                        return true;
                    }
                }
                // handle specific behavior for puppeteer
                if (session.browser.type === 'puppeteer') {
                    const page = session.browser.getPage(session.id);
                    if (payload.type) {
                        await page.keyboard.type(payload.type);
                        return true;
                    }
                    else if (payload.press) {
                        await page.keyboard.press(payload.press);
                        return true;
                    }
                }
                // you might not be able to support all browser launchers
                throw new Error(`Sending keys is not supported for browser type ${session.browser.type}.`);
            }
        },
    };
}
exports.sendKeysPlugin = sendKeysPlugin;
//# sourceMappingURL=sendKeysPlugin.js.map